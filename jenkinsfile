node {
    // Set a timeout for the pipeline to fail if it exceeds 1 minute
    timeout(time: 1, unit: 'MINUTES') {
        // Greet the user
        stage('Greet') {
            def username = input message: 'Enter your name', parameters: [string(name: 'USERNAME', defaultValue: 'World')]
            echo "Hello, ${username}!"
        }

        // Clone the repository and count words in README.md
        stage('Clone Repo & Count Words') {
            git url: 'https://github.com/opstree/spring3hibernate.git'
            def wordCount = sh(script: "wc -w < README.md", returnStdout: true).trim()
            echo "README.md has ${wordCount} words."
        }

        // Ask the user if the pipeline should succeed or fail
        stage('Check Success or Failure') {
            def shouldSucceed = input message: 'Should the pipeline succeed?', parameters: [booleanParam(name: 'SUCCEED', defaultValue: true)]
            if (!shouldSucceed) {
                error 'Pipeline failed by user request.'
            } else {
                echo 'Pipeline marked as successful by user request.'
            }
        }

        // Print a success message if the pipeline did not fail
        stage('Success') {
            echo 'Pipeline executed successfully!'
        }

        // Clean up workspace
        cleanWs()
    }
}

